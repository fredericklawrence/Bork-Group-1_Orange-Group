 

import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;

public class CommandFactory {

    private static CommandFactory theInstance;
    public static List<String> MOVEMENT_COMMANDS = 
        Arrays.asList("n","w","e","s","u","d" );

    public static synchronized CommandFactory instance() {
        if (theInstance == null) {
            theInstance = new CommandFactory();
        }
        return theInstance;
    }

    private CommandFactory() {
    }

    public Command parse(String command) {
        boolean itemSpecific = false;
        String[] multiCommand = command.split(" ");
     
        ArrayList<Item> vicinity = GameState.instance().getArrayListOfVicinity();
        if(itemSpecific){ 
            for(Item item : vicinity)
                if(multiCommand[1].equals(item.getPrimary()))
                    itemSpecific = true;
            } 
        
            if(multiCommand.length == 1){
            
            if (MOVEMENT_COMMANDS.contains(command)) {
                return new MovementCommand(command);
            }else if(command.equalsIgnoreCase("save")) {
                return new SaveCommand(command);
            }else if(command.equalsIgnoreCase("inventory") || command.equalsIgnoreCase("i")) {
                return new InventoryCommand();
            }else{
                return new UnknownCommand(command);
            }
        }else{
            
            if (multiCommand[0].equalsIgnoreCase("take")){
                return new TakeCommand(multiCommand[1]);
            }else if(multiCommand[0].equalsIgnoreCase("drop")){
                return new DropCommand(multiCommand[1]);
            }else if(itemSpecific){
                return new ItemSpecificCommand(multiCommand[0], multiCommand[1]);               
                    
            }else{
                return new UnknownCommand(command);
            }
        }
    }
}
