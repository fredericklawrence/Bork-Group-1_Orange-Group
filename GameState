 

import java.util.Scanner;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;

public class GameState {

    public static class IllegalSaveFormatException extends Exception {
        public IllegalSaveFormatException(String e) {
            super(e);
        }
    }

    static String DEFAULT_SAVE_FILE = "bork_save";
    static String SAVE_FILE_EXTENSION = ".sav";
    static String SAVE_FILE_VERSION = "Bork v2.0";
    static String INVENTORY_LEADER = "Inventory: ";

    static String CURRENT_ROOM_LEADER = "Current room: ";

    private static GameState theInstance;
    private Dungeon dungeon;
    private Room adventurersCurrentRoom;
    private ArrayList<Item> inventory; 

    static synchronized GameState instance() {
        if (theInstance == null) {
            theInstance = new GameState();
        }
        return theInstance;
    }

    private GameState() {
        inventory = new ArrayList<>();
    }

    void restore(String filename) throws FileNotFoundException,
        IllegalSaveFormatException, Dungeon.IllegalDungeonFormatException {

        Scanner s = new Scanner(new FileReader(filename));

        if (!s.nextLine().equals(SAVE_FILE_VERSION)) {
            throw new IllegalSaveFormatException("Save file not compatible.");
        }
        

        s.nextLine();
        String dungeonFileLine = s.nextLine();

        if (!dungeonFileLine.startsWith(Dungeon.FILENAME_LEADER)) {
            throw new IllegalSaveFormatException("No '" +
                Dungeon.FILENAME_LEADER + 
                "' after version indicator.");
        }

        dungeon = new Dungeon(dungeonFileLine.substring(
            Dungeon.FILENAME_LEADER.length()));
        dungeon.restoreState(s);


        String currentRoomLine = s.nextLine();
        adventurersCurrentRoom = dungeon.getRoom(
            currentRoomLine.substring(CURRENT_ROOM_LEADER.length()));
            try 
        {
            String fullInventory = s.nextLine().substring(INVENTORY_LEADER.length());
            String[] inventory2 = fullInventory.split(",");
            for (String str : inventory2)
            {
                inventory.add(getDungeon().getItem(str));
            }
        }
        catch (Exception e) {}
    }

    void store() throws IOException {
        store(DEFAULT_SAVE_FILE);
    }

    void store(String saveName) throws IOException {
        String filename = saveName + SAVE_FILE_EXTENSION;
        PrintWriter w = new PrintWriter(new FileWriter(filename));
        w.println(SAVE_FILE_VERSION);
        dungeon.storeState(w);
        w.println(CURRENT_ROOM_LEADER + 
            getAdventurersCurrentRoom().getTitle());
        w.close();
    }

    void initialize(Dungeon dungeon) {
        this.dungeon = dungeon;
       
        adventurersCurrentRoom = dungeon.getEntry();
    }

    Room getAdventurersCurrentRoom() {
        return adventurersCurrentRoom;
    }

    void setAdventurersCurrentRoom(Room room) {
        adventurersCurrentRoom = room;
    }

    Dungeon getDungeon() {
        return dungeon;
    }
    ArrayList<String> getInventoryNames() 
    {
       ArrayList<String> inventoryString = new ArrayList<String>();
        if(inventory != null){
            for(Item item : inventory){
                
                inventoryString.add(item.getPrimary());
            }
        }else{
            System.out.print("Inventory is empty");
        }
        return inventoryString;
    }
    public void addToInventory(Item item)
    {
        inventory.add(item);
    }
    public void removeFromInventory(Item item)
    {
        inventory.remove(item);
    }
    //Returns an item only if item is in "current room" or in "inventory"
    Item getItemInVicinityNamed(String name)
    {
       //Room cur = getAdventurersCurrentRoom();
       ArrayList<Item> vicinity = adventurersCurrentRoom.getContents();
       //ArrayList<Item> vicinity = cur.getContents();
       for(Item item : inventory)
           vicinity.add(item);
       
       for(Item item : vicinity){
           if(item.equals(null)){
               return null;
            }else if(item.getPrimary().equals(name))
               return item;
            }
       return null;
    }
    Item getItemFromInventoryNamed(String name)
    {
        for(Item item : inventory){
           if(item.equals(null))
                System.out.print("Nothing is currently in your inventory.");
            else if(item.getPrimary().equals(name))
               return item;
        }
        return null;
    }
    ArrayList getArrayListOfVicinity()
    {
        ArrayList<Item> vicinity = adventurersCurrentRoom.getContents();
        for(Item item : inventory)
            vicinity.add(item);
        return vicinity;    
    }
}
