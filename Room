 

import java.util.ArrayList;
import java.util.Scanner;
import java.io.IOException;
import java.io.PrintWriter;


public class Room {

    class NoRoomException extends Exception {}

    private String title;
    private String desc;
    private boolean beenHere;
    private ArrayList<Exit> exits;
    private ArrayList<Item> items;
    private ArrayList<Item> allItems;
    private Dungeon d;

    /**Room(String title) {
        init();
        this.title = title;
    }**/

    /** Given a Scanner object positioned at the beginning of a "room" file
        entry, read and return a Room object representing it. 
        @throws NoRoomException The reader object is not positioned at the
        start of a room entry. A side effect of this is the reader's cursor
        is now positioned one line past where it was.
        @throws IllegalDungeonFormatException A structural problem with the
        dungeon file itself, detected when trying to read this room.
     */
    Room(Scanner s, Dungeon d, boolean initState, ArrayList<Item> allItems) throws NoRoomException,
        Dungeon.IllegalDungeonFormatException {
        init();
        this.allItems=allItems;
        
        title = s.nextLine();                           //1st
   
        desc = "";
        if (title.equals(Dungeon.TOP_LEVEL_DELIM)) {
            throw new NoRoomException();
        }
        
        String line = s.nextLine();               //2nd
        String[] itemString; 
        if (line.contains(Dungeon.PLACE_MARKER)){
            line = line.replace(Dungeon.PLACE_MARKER, "");
            itemString = line.split(",");
            for(String names : itemString){
                  items.add(getItemNamed(names));
                 }
        }
        String lineOfDesc = s.nextLine();    //2nd or 3rd
        
        while (!lineOfDesc.equals(Dungeon.SECOND_LEVEL_DELIM) &&
               !lineOfDesc.equals(Dungeon.TOP_LEVEL_DELIM)) {
            desc += lineOfDesc + "\n";
            lineOfDesc = s.nextLine();         //4th until "---" or "==="
        }

        // throw away delimiter
        if (!lineOfDesc.equals(Dungeon.SECOND_LEVEL_DELIM)) {
            throw new Dungeon.IllegalDungeonFormatException("No '" +
                Dungeon.SECOND_LEVEL_DELIM + "' after room.");
        }
    }

    // Common object initialization tasks.
    private void init() {
        exits = new ArrayList<Exit>();
        items = new ArrayList<Item>();
        allItems = new ArrayList<Item>();
        beenHere = false;
    }

    String getTitle() { return title; }

    void setDesc(String desc) { this.desc = desc; }

    /*
     * Store the current (changeable) state of this room to the writer
     * passed.
     */
    void storeState(PrintWriter w) throws IOException {
        // At this point, nothing to save for this room if the user hasn't
        // visited it.
        if (beenHere) {
            w.println(title + ":");
            w.println("beenHere=true");
            w.println(Dungeon.SECOND_LEVEL_DELIM);
        }
        
        if(!items.isEmpty())
        
        {
            w.print("Contents: ");
            for(int i = 0; i < items.size() - 1; i++) 
            {
                w.print(items.get(i).getPrimary() + ",");
            }
            w.print(items.get(items.size() - 1).getPrimary());
            System.out.println();
        }
        w.println(Dungeon.SECOND_LEVEL_DELIM);
        
    }

    void restoreState(Scanner s) throws GameState.IllegalSaveFormatException {

        String line = s.nextLine();
        if (!line.startsWith("beenHere")) {
            throw new GameState.IllegalSaveFormatException("No beenHere.");
        }
        beenHere = Boolean.valueOf(line.substring(line.indexOf("=")+1));

        line = s.nextLine(); 
        if (!line.equals(Dungeon.SECOND_LEVEL_DELIM)) 
        {
            line = line.substring(10);
            String[] contents = line.split(",");
            for (String str : contents) 
            {
                items.add(getItemNamed(str));
            }
            s.nextLine();   // consume end-of-room delimiter
        }
    }

    public String describe() {
        String description;
        
        if (beenHere) {
            description = title;
        } else {
            description = title + "\n" + desc;
        }
        for (Exit exit : exits) {
            description += "\n" + exit.describe();
            
        }
        description += "\n";
        for (Item item : items) {
            description += item.getPrimary()+ " ";   
        }
        beenHere = true;
        return description;
    }
    
    public Room leaveBy(String dir) {
        for (Exit exit : exits) {
            if (exit.getDir().equals(dir)) {
                return exit.getDest();
            }
        }
        return null;
    }

    void addExit(Exit exit) {
        exits.add(exit);
    }
    //Item
    void add(Item item) {
        try{ items.add(item); } catch (Exception e) {
            System.out.println(e.getMessage()); }
    }
    void remove(Item item) {
        try{ items.remove(item); } catch (Exception e) {
            System.out.println(e.getMessage()); }
    }
    public Item getItemNamed(String name)
    {
        for(Item item : allItems){
            if(item.getPrimary().equals(name)){
                return item;
            }
        }
        return null;    
    }
    public ArrayList getContents()
    {
        
        return items;
        
    }
}
